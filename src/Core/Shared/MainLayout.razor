@inherits LayoutComponentBase
@inject ISnackbar Snackbar

<MudThemeProvider IsDarkMode="@_isDarkMode" />
<MudDialogProvider />
<MudSnackbarProvider />

<MudLayout>
    <MudAppBar Elevation="2">
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" />
        <MudIcon Icon="bx bxs-hot" Color="Color.Primary" Size="Size.Medium" Class="mr-2 mb-0"></MudIcon>
        <MudLink Href="#" Underline="Underline.Hover">
            <MudText Color="Color.Primary" Typo="Typo.h6">Blazor Concepts</MudText>
        </MudLink>
        <MudSpacer/>
        @if (_isDarkMode)
        {
            <MudIconButton Edge="Edge.End" Icon="@Icons.Filled.WbSunny" OnClick="DarkModeToggle"></MudIconButton>
        }
        else
        {
            <MudIconButton Edge="Edge.End" Icon="@Icons.Filled.ModeNight" OnClick="DarkModeToggle"></MudIconButton>
        }
    </MudAppBar>
    <MudDrawer @bind-Open="@_drawerOpen" Variant="DrawerVariant.Temporary">
        <MudDrawerHeader>
            <MudText Typo="Typo.h6">Blazor Concepts</MudText>
        </MudDrawerHeader>
        <NavMenu/>
    </MudDrawer>
    <MudMainContent>
        @Body
    </MudMainContent>
</MudLayout>

@code
{
    bool _isDarkMode = true;
    bool _drawerOpen;

    void DarkModeToggle()
    {
        _isDarkMode = !_isDarkMode;
        Snackbar.Add("Dark mode toggled", Severity.Success);
    }

    void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

    protected override void OnInitialized()
    {
        StateHasChanged();
    }
}
